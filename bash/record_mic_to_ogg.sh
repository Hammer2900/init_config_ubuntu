#!/bin/bash

WAV_FILE="test.wav"
OGG_FILE="test.ogg"
# Убрал DURATION и SAMPLE_RATE из переменных, так как они жестко заданы в arecord
# Если хотите сделать их настраиваемыми, верните:
# DURATION=10
# SAMPLE_RATE=44100

# Функция, которая будет вызвана при нажатии Ctrl+C или нормальном завершении
cleanup_and_convert() {
    echo # Пустая строка для лучшего форматирования вывода после Ctrl+C

    # Проверяем, существует ли файл и не пустой ли он
    if [ -s "$WAV_FILE" ]; then # -s проверяет, что файл существует и его размер больше нуля
        echo "Запись остановлена/завершена. Конвертирую $WAV_FILE в $OGG_FILE..."
        ffmpeg -i "$WAV_FILE" -y "$OGG_FILE"
        if [ $? -eq 0 ]; then
            echo "Конвертация в $OGG_FILE завершена успешно."
            # Опционально: удалить исходный WAV файл
            # echo "Удаляю временный файл $WAV_FILE..."
            # rm "$WAV_FILE"
        else
            echo "Ошибка: не удалось конвертировать $WAV_FILE в $OGG_FILE."
        fi
    else
        echo "Файл $WAV_FILE не найден или пуст. Конвертация не будет выполнена."
    fi
    # Убираем ловушку, чтобы случайное Ctrl+C здесь не вызвало рекурсию
    trap - SIGINT SIGTERM
    exit 0
}

# Устанавливаем ловушку на сигналы SIGINT (Ctrl+C) и SIGTERM (обычный kill)
trap cleanup_and_convert SIGINT SIGTERM

echo "Начинаю запись с микрофона на 10 секунд (или до Ctrl+C) в файл $WAV_FILE..."
# Запись с микрофона. Если вы хотите записывать БЕЗ ограничения по времени
# и останавливать ТОЛЬКО по Ctrl+C, уберите опцию -d 10
arecord -f cd -t wav -d 10 -r 44100 "$WAV_FILE"

# Если arecord завершился сам (например, по таймеру -d 10),
# а не по Ctrl+C, то trap не сработает для SIGINT.
# Поэтому вызываем функцию cleanup_and_convert здесь еще раз,
# чтобы обработать и этот случай.
# Если trap уже сработал, то скрипт из него выйдет (exit 0), и до сюда не дойдет.
echo "arecord завершил работу."
cleanup_and_convert